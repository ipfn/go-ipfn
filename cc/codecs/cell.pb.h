// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cell.proto

#ifndef PROTOBUF_cell_2eproto__INCLUDED
#define PROTOBUF_cell_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cell_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCellImpl();
void InitDefaultsCell();
void InitDefaultsBondImpl();
void InitDefaultsBond();
inline void InitDefaults() {
  InitDefaultsCell();
  InitDefaultsBond();
}
}  // namespace protobuf_cell_2eproto
namespace ipfn {
class Bond;
class BondDefaultTypeInternal;
extern BondDefaultTypeInternal _Bond_default_instance_;
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
}  // namespace ipfn
namespace ipfn {

// ===================================================================

class Cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipfn.Cell) */ {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Cell* other);
  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const PROTOBUF_FINAL { return New(NULL); }

  Cell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ipfn.Bond bonds = 4;
  int bonds_size() const;
  void clear_bonds();
  static const int kBondsFieldNumber = 4;
  const ::ipfn::Bond& bonds(int index) const;
  ::ipfn::Bond* mutable_bonds(int index);
  ::ipfn::Bond* add_bonds();
  ::google::protobuf::RepeatedPtrField< ::ipfn::Bond >*
      mutable_bonds();
  const ::google::protobuf::RepeatedPtrField< ::ipfn::Bond >&
      bonds() const;

  // repeated .ipfn.Cell body = 5;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 5;
  const ::ipfn::Cell& body(int index) const;
  ::ipfn::Cell* mutable_body(int index);
  ::ipfn::Cell* add_body();
  ::google::protobuf::RepeatedPtrField< ::ipfn::Cell >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::ipfn::Cell >&
      body() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string soul = 2;
  void clear_soul();
  static const int kSoulFieldNumber = 2;
  const ::std::string& soul() const;
  void set_soul(const ::std::string& value);
  #if LANG_CXX11
  void set_soul(::std::string&& value);
  #endif
  void set_soul(const char* value);
  void set_soul(const char* value, size_t size);
  ::std::string* mutable_soul();
  ::std::string* release_soul();
  void set_allocated_soul(::std::string* soul);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ipfn.Cell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ipfn::Bond > bonds_;
  ::google::protobuf::RepeatedPtrField< ::ipfn::Cell > body_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr soul_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_cell_2eproto::TableStruct;
  friend void ::protobuf_cell_2eproto::InitDefaultsCellImpl();
};
// -------------------------------------------------------------------

class Bond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipfn.Bond) */ {
 public:
  Bond();
  virtual ~Bond();

  Bond(const Bond& from);

  inline Bond& operator=(const Bond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bond(Bond&& from) noexcept
    : Bond() {
    *this = ::std::move(from);
  }

  inline Bond& operator=(Bond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bond* internal_default_instance() {
    return reinterpret_cast<const Bond*>(
               &_Bond_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Bond* other);
  friend void swap(Bond& a, Bond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bond* New() const PROTOBUF_FINAL { return New(NULL); }

  Bond* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bond& from);
  void MergeFrom(const Bond& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string kind = 2;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // @@protoc_insertion_point(class_scope:ipfn.Bond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  mutable int _cached_size_;
  friend struct ::protobuf_cell_2eproto::TableStruct;
  friend void ::protobuf_cell_2eproto::InitDefaultsBondImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cell

// string name = 1;
inline void Cell::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cell::name() const {
  // @@protoc_insertion_point(field_get:ipfn.Cell.name)
  return name_.GetNoArena();
}
inline void Cell::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Cell.name)
}
#if LANG_CXX11
inline void Cell::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Cell.name)
}
#endif
inline void Cell::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Cell.name)
}
inline void Cell::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Cell.name)
}
inline ::std::string* Cell::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Cell.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cell::release_name() {
  // @@protoc_insertion_point(field_release:ipfn.Cell.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Cell.name)
}

// string soul = 2;
inline void Cell::clear_soul() {
  soul_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cell::soul() const {
  // @@protoc_insertion_point(field_get:ipfn.Cell.soul)
  return soul_.GetNoArena();
}
inline void Cell::set_soul(const ::std::string& value) {
  
  soul_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Cell.soul)
}
#if LANG_CXX11
inline void Cell::set_soul(::std::string&& value) {
  
  soul_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Cell.soul)
}
#endif
inline void Cell::set_soul(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soul_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Cell.soul)
}
inline void Cell::set_soul(const char* value, size_t size) {
  
  soul_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Cell.soul)
}
inline ::std::string* Cell::mutable_soul() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Cell.soul)
  return soul_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cell::release_soul() {
  // @@protoc_insertion_point(field_release:ipfn.Cell.soul)
  
  return soul_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_soul(::std::string* soul) {
  if (soul != NULL) {
    
  } else {
    
  }
  soul_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soul);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Cell.soul)
}

// bytes value = 3;
inline void Cell::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cell::value() const {
  // @@protoc_insertion_point(field_get:ipfn.Cell.value)
  return value_.GetNoArena();
}
inline void Cell::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Cell.value)
}
#if LANG_CXX11
inline void Cell::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Cell.value)
}
#endif
inline void Cell::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Cell.value)
}
inline void Cell::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Cell.value)
}
inline ::std::string* Cell::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Cell.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cell::release_value() {
  // @@protoc_insertion_point(field_release:ipfn.Cell.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Cell.value)
}

// repeated .ipfn.Bond bonds = 4;
inline int Cell::bonds_size() const {
  return bonds_.size();
}
inline void Cell::clear_bonds() {
  bonds_.Clear();
}
inline const ::ipfn::Bond& Cell::bonds(int index) const {
  // @@protoc_insertion_point(field_get:ipfn.Cell.bonds)
  return bonds_.Get(index);
}
inline ::ipfn::Bond* Cell::mutable_bonds(int index) {
  // @@protoc_insertion_point(field_mutable:ipfn.Cell.bonds)
  return bonds_.Mutable(index);
}
inline ::ipfn::Bond* Cell::add_bonds() {
  // @@protoc_insertion_point(field_add:ipfn.Cell.bonds)
  return bonds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ipfn::Bond >*
Cell::mutable_bonds() {
  // @@protoc_insertion_point(field_mutable_list:ipfn.Cell.bonds)
  return &bonds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ipfn::Bond >&
Cell::bonds() const {
  // @@protoc_insertion_point(field_list:ipfn.Cell.bonds)
  return bonds_;
}

// repeated .ipfn.Cell body = 5;
inline int Cell::body_size() const {
  return body_.size();
}
inline void Cell::clear_body() {
  body_.Clear();
}
inline const ::ipfn::Cell& Cell::body(int index) const {
  // @@protoc_insertion_point(field_get:ipfn.Cell.body)
  return body_.Get(index);
}
inline ::ipfn::Cell* Cell::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:ipfn.Cell.body)
  return body_.Mutable(index);
}
inline ::ipfn::Cell* Cell::add_body() {
  // @@protoc_insertion_point(field_add:ipfn.Cell.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ipfn::Cell >*
Cell::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:ipfn.Cell.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ipfn::Cell >&
Cell::body() const {
  // @@protoc_insertion_point(field_list:ipfn.Cell.body)
  return body_;
}

// -------------------------------------------------------------------

// Bond

// string name = 1;
inline void Bond::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bond::name() const {
  // @@protoc_insertion_point(field_get:ipfn.Bond.name)
  return name_.GetNoArena();
}
inline void Bond::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Bond.name)
}
#if LANG_CXX11
inline void Bond::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Bond.name)
}
#endif
inline void Bond::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Bond.name)
}
inline void Bond::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Bond.name)
}
inline ::std::string* Bond::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Bond.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bond::release_name() {
  // @@protoc_insertion_point(field_release:ipfn.Bond.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bond::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Bond.name)
}

// string kind = 2;
inline void Bond::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bond::kind() const {
  // @@protoc_insertion_point(field_get:ipfn.Bond.kind)
  return kind_.GetNoArena();
}
inline void Bond::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Bond.kind)
}
#if LANG_CXX11
inline void Bond::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Bond.kind)
}
#endif
inline void Bond::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Bond.kind)
}
inline void Bond::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Bond.kind)
}
inline ::std::string* Bond::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Bond.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bond::release_kind() {
  // @@protoc_insertion_point(field_release:ipfn.Bond.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bond::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Bond.kind)
}

// string from = 3;
inline void Bond::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bond::from() const {
  // @@protoc_insertion_point(field_get:ipfn.Bond.from)
  return from_.GetNoArena();
}
inline void Bond::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Bond.from)
}
#if LANG_CXX11
inline void Bond::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Bond.from)
}
#endif
inline void Bond::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Bond.from)
}
inline void Bond::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Bond.from)
}
inline ::std::string* Bond::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Bond.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bond::release_from() {
  // @@protoc_insertion_point(field_release:ipfn.Bond.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bond::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Bond.from)
}

// string to = 4;
inline void Bond::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bond::to() const {
  // @@protoc_insertion_point(field_get:ipfn.Bond.to)
  return to_.GetNoArena();
}
inline void Bond::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipfn.Bond.to)
}
#if LANG_CXX11
inline void Bond::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipfn.Bond.to)
}
#endif
inline void Bond::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipfn.Bond.to)
}
inline void Bond::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipfn.Bond.to)
}
inline ::std::string* Bond::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:ipfn.Bond.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bond::release_to() {
  // @@protoc_insertion_point(field_release:ipfn.Bond.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bond::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ipfn.Bond.to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipfn

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cell_2eproto__INCLUDED
